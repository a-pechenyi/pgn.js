/* parser generated by jison 0.4.2 */
var pgn = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"PGN":3,"EOF":4,"Database":5,"Game":6,"TagList":7,"MoveText":8,"Tag":9,"[":10,"SYMBOL":11,"PGNString":12,"]":13,"GameTerminator":14,"MoveList":15,"Move":16,"NumberedMove":17,"SANMove":18,"COMMENTARY":19,"RAV":20,"NAG":21,"MoveNumber":22,"INTEGER":23,"PeriodSequence":24,".":25,"QCASTLING":26,"KCASTLING":27,"SAN":28,"(":29,")":30,"*":31,"BLACK_WINS":32,"WHITE_WINS":33,"DRAW":34,"STRING":35,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",10:"[",11:"SYMBOL",13:"]",19:"COMMENTARY",21:"NAG",23:"INTEGER",25:".",26:"QCASTLING",27:"KCASTLING",28:"SAN",29:"(",30:")",31:"*",32:"BLACK_WINS",33:"WHITE_WINS",34:"DRAW",35:"STRING"},
productions_: [0,[3,1],[3,1],[5,1],[5,2],[6,2],[6,2],[6,1],[7,1],[7,2],[9,4],[8,2],[8,1],[8,2],[8,3],[8,2],[15,1],[15,2],[16,1],[16,1],[16,1],[16,1],[16,1],[17,2],[22,2],[22,1],[24,1],[24,2],[18,1],[18,1],[18,1],[20,3],[14,1],[14,1],[14,1],[14,1],[12,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:this.$ = []
break;
case 2:this.$ = $$[$0];return this.$;
break;
case 3:this.$ = [$$[$0]]
break;
case 4:this.$ = $$[$0-1]; $$[$0-1].push($$[$0])
break;
case 5:this.$ = {header: $$[$0-1], moves: $$[$0][0], terminator: $$[$0][1]}
break;
case 6:this.$ = {header: $$[$0-1], moves: [], terminator: null}
break;
case 7:this.$ = {header: null, moves: $$[$0][0], terminator: $$[$0][1]}
break;
case 8:this.$ = {}; this.$[$$[$0][0]]=$$[$0][1];
break;
case 9:this.$ = $$[$0-1]; $$[$0-1][$$[$0][0]]=$$[$0][1];
break;
case 10:this.$ = [$$[$0-2], $$[$0-1]];
break;
case 11:this.$ = [[], $$[$0-1]]
break;
case 12:this.$ = [[], $$[$0]]
break;
case 13:this.$ = [$$[$0-1], $$[$0]]
break;
case 14:this.$ = [$$[$0-2], $$[$0-1]]
break;
case 15:this.$ = [$$[$0-1], null];
break;
case 16:this.$ = [$$[$0]]
break;
case 17:this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 19:this.$ = {type: 'move', san: $$[$0]}
break;
case 20:this.$ = {type: 'commentary', commentary: $$[$0]}
break;
case 22:this.$ = {type: 'nag', value: $$[$0]}
break;
case 23:this.$ = {type: 'move', number: $$[$0-1], san: $$[$0]}
break;
case 24:this.$ = (Number($$[$0-1])-1) * 2 + ($$[$0].length >= 3 ? 1 : 0);
break;
case 25:this.$ = (Number($$[$0])-1)*2;
break;
case 26:this.$ = $$[$0]
break;
case 27:this.$ = $$[$0-1] + $$[$0]
break;
case 31:this.$ = {type: 'nodelist', moves: $$[$0-1]}
break;
case 36: // replace escaped characters with actual character
          this.$ = yytext.replace(/\\(\\|")/g, "$"+"1");
        
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,7:5,8:6,9:7,10:[1,10],14:8,15:9,16:15,17:16,18:17,19:[1,18],20:19,21:[1,20],22:21,23:[1,26],26:[1,22],27:[1,23],28:[1,24],29:[1,25],31:[1,11],32:[1,12],33:[1,13],34:[1,14]},{1:[3]},{1:[2,1]},{1:[2,2],6:27,7:5,8:6,9:7,10:[1,10],14:8,15:9,16:15,17:16,18:17,19:[1,18],20:19,21:[1,20],22:21,23:[1,26],26:[1,22],27:[1,23],28:[1,24],29:[1,25],31:[1,11],32:[1,12],33:[1,13],34:[1,14]},{1:[2,3],10:[2,3],19:[2,3],21:[2,3],23:[2,3],26:[2,3],27:[2,3],28:[2,3],29:[2,3],31:[2,3],32:[2,3],33:[2,3],34:[2,3]},{4:[1,29],8:28,9:30,10:[1,10],14:8,15:9,16:15,17:16,18:17,19:[1,18],20:19,21:[1,20],22:21,23:[1,26],26:[1,22],27:[1,23],28:[1,24],29:[1,25],31:[1,11],32:[1,12],33:[1,13],34:[1,14]},{1:[2,7],10:[2,7],19:[2,7],21:[2,7],23:[2,7],26:[2,7],27:[2,7],28:[2,7],29:[2,7],31:[2,7],32:[2,7],33:[2,7],34:[2,7]},{4:[2,8],10:[2,8],19:[2,8],21:[2,8],23:[2,8],26:[2,8],27:[2,8],28:[2,8],29:[2,8],31:[2,8],32:[2,8],33:[2,8],34:[2,8]},{1:[2,12],4:[1,31],10:[2,12],19:[2,12],21:[2,12],23:[2,12],26:[2,12],27:[2,12],28:[2,12],29:[2,12],31:[2,12],32:[2,12],33:[2,12],34:[2,12]},{4:[1,33],14:32,16:34,17:16,18:17,19:[1,18],20:19,21:[1,20],22:21,23:[1,26],26:[1,22],27:[1,23],28:[1,24],29:[1,25],31:[1,11],32:[1,12],33:[1,13],34:[1,14]},{11:[1,35]},{1:[2,32],4:[2,32],10:[2,32],19:[2,32],21:[2,32],23:[2,32],26:[2,32],27:[2,32],28:[2,32],29:[2,32],31:[2,32],32:[2,32],33:[2,32],34:[2,32]},{1:[2,33],4:[2,33],10:[2,33],19:[2,33],21:[2,33],23:[2,33],26:[2,33],27:[2,33],28:[2,33],29:[2,33],31:[2,33],32:[2,33],33:[2,33],34:[2,33]},{1:[2,34],4:[2,34],10:[2,34],19:[2,34],21:[2,34],23:[2,34],26:[2,34],27:[2,34],28:[2,34],29:[2,34],31:[2,34],32:[2,34],33:[2,34],34:[2,34]},{1:[2,35],4:[2,35],10:[2,35],19:[2,35],21:[2,35],23:[2,35],26:[2,35],27:[2,35],28:[2,35],29:[2,35],31:[2,35],32:[2,35],33:[2,35],34:[2,35]},{4:[2,16],19:[2,16],21:[2,16],23:[2,16],26:[2,16],27:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16],33:[2,16],34:[2,16]},{4:[2,18],19:[2,18],21:[2,18],23:[2,18],26:[2,18],27:[2,18],28:[2,18],29:[2,18],30:[2,18],31:[2,18],32:[2,18],33:[2,18],34:[2,18]},{4:[2,19],19:[2,19],21:[2,19],23:[2,19],26:[2,19],27:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[2,19],33:[2,19],34:[2,19]},{4:[2,20],19:[2,20],21:[2,20],23:[2,20],26:[2,20],27:[2,20],28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[2,20],33:[2,20],34:[2,20]},{4:[2,21],19:[2,21],21:[2,21],23:[2,21],26:[2,21],27:[2,21],28:[2,21],29:[2,21],30:[2,21],31:[2,21],32:[2,21],33:[2,21],34:[2,21]},{4:[2,22],19:[2,22],21:[2,22],23:[2,22],26:[2,22],27:[2,22],28:[2,22],29:[2,22],30:[2,22],31:[2,22],32:[2,22],33:[2,22],34:[2,22]},{18:36,26:[1,22],27:[1,23],28:[1,24]},{4:[2,28],19:[2,28],21:[2,28],23:[2,28],26:[2,28],27:[2,28],28:[2,28],29:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28]},{4:[2,29],19:[2,29],21:[2,29],23:[2,29],26:[2,29],27:[2,29],28:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29]},{4:[2,30],19:[2,30],21:[2,30],23:[2,30],26:[2,30],27:[2,30],28:[2,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30]},{15:37,16:15,17:16,18:17,19:[1,18],20:19,21:[1,20],22:21,23:[1,26],26:[1,22],27:[1,23],28:[1,24],29:[1,25]},{24:38,25:[1,39],26:[2,25],27:[2,25],28:[2,25]},{1:[2,4],10:[2,4],19:[2,4],21:[2,4],23:[2,4],26:[2,4],27:[2,4],28:[2,4],29:[2,4],31:[2,4],32:[2,4],33:[2,4],34:[2,4]},{1:[2,5],10:[2,5],19:[2,5],21:[2,5],23:[2,5],26:[2,5],27:[2,5],28:[2,5],29:[2,5],31:[2,5],32:[2,5],33:[2,5],34:[2,5]},{1:[2,6],10:[2,6],19:[2,6],21:[2,6],23:[2,6],26:[2,6],27:[2,6],28:[2,6],29:[2,6],31:[2,6],32:[2,6],33:[2,6],34:[2,6]},{4:[2,9],10:[2,9],19:[2,9],21:[2,9],23:[2,9],26:[2,9],27:[2,9],28:[2,9],29:[2,9],31:[2,9],32:[2,9],33:[2,9],34:[2,9]},{1:[2,11],10:[2,11],19:[2,11],21:[2,11],23:[2,11],26:[2,11],27:[2,11],28:[2,11],29:[2,11],31:[2,11],32:[2,11],33:[2,11],34:[2,11]},{1:[2,13],4:[1,40],10:[2,13],19:[2,13],21:[2,13],23:[2,13],26:[2,13],27:[2,13],28:[2,13],29:[2,13],31:[2,13],32:[2,13],33:[2,13],34:[2,13]},{1:[2,15],10:[2,15],19:[2,15],21:[2,15],23:[2,15],26:[2,15],27:[2,15],28:[2,15],29:[2,15],31:[2,15],32:[2,15],33:[2,15],34:[2,15]},{4:[2,17],19:[2,17],21:[2,17],23:[2,17],26:[2,17],27:[2,17],28:[2,17],29:[2,17],30:[2,17],31:[2,17],32:[2,17],33:[2,17],34:[2,17]},{12:41,35:[1,42]},{4:[2,23],19:[2,23],21:[2,23],23:[2,23],26:[2,23],27:[2,23],28:[2,23],29:[2,23],30:[2,23],31:[2,23],32:[2,23],33:[2,23],34:[2,23]},{16:34,17:16,18:17,19:[1,18],20:19,21:[1,20],22:21,23:[1,26],26:[1,22],27:[1,23],28:[1,24],29:[1,25],30:[1,43]},{25:[1,44],26:[2,24],27:[2,24],28:[2,24]},{25:[2,26],26:[2,26],27:[2,26],28:[2,26]},{1:[2,14],10:[2,14],19:[2,14],21:[2,14],23:[2,14],26:[2,14],27:[2,14],28:[2,14],29:[2,14],31:[2,14],32:[2,14],33:[2,14],34:[2,14]},{13:[1,45]},{13:[2,36]},{4:[2,31],19:[2,31],21:[2,31],23:[2,31],26:[2,31],27:[2,31],28:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31]},{25:[2,27],26:[2,27],27:[2,27],28:[2,27]},{4:[2,10],10:[2,10],19:[2,10],21:[2,10],23:[2,10],26:[2,10],27:[2,10],28:[2,10],29:[2,10],31:[2,10],32:[2,10],33:[2,10],34:[2,10]}],
defaultActions: {2:[2,1],42:[2,36]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* generated by jison-lex 0.1.0 */
var lexer = (function(){
var lexer = {
EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 19 /* grab commentaries with surrounding whitespaces */
break;
case 1:return 19
break;
case 2:/* skip whitespaces */
break;
case 3:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 35
break;
case 4:return 34
break;
case 5:return 33
break;
case 6:return 32
break;
case 7:return 26
break;
case 8:return 27
break;
case 9:return 26
break;
case 10:return 27
break;
case 11:return 23
break;
case 12:return 28
break;
case 13:return 25
break;
case 14:return 31
break;
case 15:return 10
break;
case 16:return 13
break;
case 17:return 29
break;
case 18:return 30
break;
case 19:return '<'
break;
case 20:return '>'
break;
case 21:return 21
break;
case 22:return 21
break;
case 23:return 21
break;
case 24:return 21
break;
case 25:return 21
break;
case 26:return 21
break;
case 27:return "NAG"
break;
case 28:return "NAG"
break;
case 29:return "NAG"
break;
case 30:return "NAG"
break;
case 31:return "NAG"
break;
case 32:return "NAG"
break;
case 33:return "NAG"
break;
case 34:return "NAG"
break;
case 35:return "NAG"
break;
case 36:return "NAG"
break;
case 37:return "NAG"
break;
case 38:return "NAG"
break;
case 39:return "NAG"
break;
case 40:return "NAG"
break;
case 41:return "NAG"
break;
case 42:return "NAG"
break;
case 43:return "NAG"
break;
case 44:return "NAG"
break;
case 45:return "NAG"
break;
case 46:return 11
break;
case 47:return 4
break;
case 48:return 'INVALID'
break;
}
},
rules: [/^(?:\s*\{[^\}]*\}\s*)/,/^(?:\s*;[^\n]*\s*)/,/^(?:\s+)/,/^(?:"(?:\\[\\"]|[^\\"])*")/,/^(?:1\/2-1\/2\b)/,/^(?:1-0\b)/,/^(?:0-1\b)/,/^(?:O-O-O\b)/,/^(?:O-O\b)/,/^(?:0-0-0\b)/,/^(?:0-0\b)/,/^(?:(?:[0-9]|[1-9][0-9]+)\b)/,/^(?:([RNBKQ])?([a-h])?([1-8])?x?([a-h])([1-8])(?:=[RNBQ])?(?:(?:\+(?=$|[^-]))|#)?)/,/^(?:\.)/,/^(?:\*)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:<)/,/^(?:>)/,/^(?:\+-)/,/^(?:-\+)/,/^(?:!!)/,/^(?:!\?)/,/^(?:\?!)/,/^(?:\?\?)/,/^(?:!)/,/^(?:\?)/,/^(?:‼)/,/^(?:⁇)/,/^(?:⁉)/,/^(?:⁈)/,/^(?:□)/,/^(?:=)/,/^(?:∞)/,/^(?:⩲)/,/^(?:⩱)/,/^(?:±)/,/^(?:∓)/,/^(?:⨀)/,/^(?:⟳)/,/^(?:→)/,/^(?:↑)/,/^(?:⇆)/,/^(?:\$[1-9][0-9]{0,2})/,/^(?:[0-9A-Za-z][0-9A-Za-z_+#=:-]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = pgn;
exports.Parser = pgn.Parser;
exports.parse = function () { return pgn.parse.apply(pgn, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}